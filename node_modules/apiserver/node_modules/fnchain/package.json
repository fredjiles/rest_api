{
  "author": {
    "name": "Kilian Ciuffolo",
    "email": "me@nailik.org",
    "url": "http://nailik.org"
  },
  "name": "fnchain",
  "description": "Serial control flow with explicit progression",
  "keywords": [
    "step",
    "series",
    "serial",
    "chain",
    "next"
  ],
  "version": "0.1.1",
  "repository": {
    "type": "git",
    "url": "http://github.com/kilianc/node-fnchain.git"
  },
  "main": "./",
  "scripts": {
    "test": "make test"
  },
  "engines": {
    "node": "*"
  },
  "dependencies": {},
  "devDependencies": {
    "mocha": "1.0.x",
    "should": "0.6.x"
  },
  "readme": "# FnChain [![build status](https://secure.travis-ci.org/kilianc/node-fnchain.png?branch=master)](http://travis-ci.org/kilianc/node-fnchain)\n\nSerial control flow with explicit progression\n\n## Installation\n\n    $ npm install fnchain\n\n## Usage\n\n```javascript\nnew FnChain(Array, Function)\n```\n\n- Array of functions each one in the form `function (p1, p2, pN, ..., next)`, where next is the step callback\n- Final callback in the canonical form `function (err, p1, p2, pN, ...)`\n\nEach function in the chain should call the step callback in order to\nadvance the execution. You can also stop the chain passing `true` as last parameter\nto the above mentioned step callback _(look at the examples)_\n\n## Methods\n\n```javascript\nFnChain.call(p1, p2, pN, ...)\n```\nFire the chain execution calling each function with the provided arguments\nNothing related with `Function.call`\n\n```javascript\nFnChain.addTask(Function)\n```\nPush a new task to the end of the chain (available even with the chain in progress)\n\n## Examples\n\n### Stop on error\n\n```javascript\nvar FnChain = require('chain');\n\nnew FnChain([\n  function (p1, p2, next) {\n    next()\n  },\n  function (p1, p2, next) {\n    next(new Error('TerribleError'))\n  },\n  function (p1, p2, next) {\n    // never fired\n    next()\n  }\n], function (err, p1, p2) {\n  err.message === 'TerribleError'\n}).call('foo', 'bar')\n```\n\n### Explicit stop\n\n```javascript\nnew FnChain([\n  function (p1, p2, next) {\n    next()\n  },\n  function (p1, p2, next) {\n    next(null, true) // stop the chain\n  },\n  function (p1, p2, next) {\n    // never fired\n    next()\n  }\n], function (err, p1, p2) {\n  err === undefined\n}).call('foo', 'bar')\n\n```\n\n### In progress addTask\n\n```javascript\nvar chain = new FnChain([\n  function (p1, p2, next) {\n    next()\n  },\n  function (p1, p2, next) {\n    chain.addTask(function (p1, p2, next) {\n      // executed at the end\n      next()\n    })\n    next()\n  },\n  function (p1, p2, next) {\n    // never fired\n    next()\n  }\n], function (err, p1, p2) {\n  \n})\nchain.call('foo', 'bar')\n\n```\n\n## License\n\n_This software is released under the MIT license cited below_.\n\n    Copyright (c) 2010 Kilian Ciuffolo, me@nailik.org. All Rights Reserved.\n\n    Permission is hereby granted, free of charge, to any person\n    obtaining a copy of this software and associated documentation\n    files (the 'Software'), to deal in the Software without\n    restriction, including without limitation the rights to use,\n    copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following\n    conditions:\n    \n    The above copyright notice and this permission notice shall be\n    included in all copies or substantial portions of the Software.\n    \n    THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n    OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "fnchain@0.1.1",
  "dist": {
    "shasum": "d490c92d41542a659ad7d55336aca3b82f067e3e"
  },
  "_from": "fnchain@0.1.1"
}
